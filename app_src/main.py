import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, simpledialog, filedialog
import os
import sys
import threading
import queue
import subprocess
import traceback
import logging
import datetime
import ctypes
import time
# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ---
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–∞–ø–∫–∞ app_src)
APP_SOURCE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, APP_SOURCE_DIR)
# --- –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ ---
from executor import is_custom_list_valid
from domain_finder import check_dependencies, analyze_site_domains_performance, analyze_site_domains_playwright, analyze_site_domains_selenium, analyze_site_domains_simple
from text_utils import setup_text_widget_bindings
from list_manager import ListManager
from profiles import PROFILES
import process_manager
import settings_manager
import testing_utils
import power_handler

def run_as_admin():
    try:
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{e}")

class App:
    def __init__(self, root):
        self.root = root
        self.process = None
        self.log_queue = queue.Queue()
        self.app_dir = APP_SOURCE_DIR
        self.profiles = PROFILES
        self.test_thread = None
        self.list_manager = ListManager(self.app_dir)
        self.domain_analysis_thread = None
        self._monitoring_active = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è status indicator
        os.makedirs("roo_tests", exist_ok=True)
        self.status_logger = logging.getLogger("status_indicators")
        handler = logging.FileHandler("roo_tests/status_runtime.log")
        formatter = logging.Formatter("%(asctime)s - %(message)s")
        handler.setFormatter(formatter)
        self.status_logger.addHandler(handler)
        self.status_logger.setLevel(logging.INFO)

        self.setup_window()
        self.create_widgets()
        self.populate_profiles_list()
        self.load_app_settings()
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–∏—Ç–∞–Ω–∏—è
        power_handler.setup_power_handler(self)
        
    def setup_window(self):
        version_hash = "unknown"
        version_file_path = os.path.join(self.app_dir, ".version_hash")
        if os.path.exists(version_file_path):
            with open(version_file_path, 'r') as f:
                full_hash = f.read().strip()
                if full_hash:
                    version_hash = full_hash[:7]
        self.root.title(f"DPI_GUI Launcher (Commit: {version_hash})")
        self.root.geometry("850x700")
        try:
            icon_path = os.path.join(self.app_dir, 'icon.ico')
            if os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
        except Exception:
            pass

    def create_widgets(self):
        notebook = ttk.Notebook(self.root)
        notebook.pack(expand=True, fill="both", padx=10, pady=5)
        tab_control = ttk.Frame(notebook, padding=10)
        tab_tools = ttk.Frame(notebook, padding=10)
        tab_testing = ttk.Frame(notebook, padding=10)
        tab_domains = ttk.Frame(notebook, padding=10)
        tab_logs = ttk.Frame(notebook, padding=10)
        notebook.add(tab_control, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        notebook.add(tab_tools, text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        notebook.add(tab_testing, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        notebook.add(tab_domains, text="–î–æ–º–µ–Ω—ã")
        notebook.add(tab_logs, text="–õ–æ–≥–∏")
        
        self.create_control_tab(tab_control)
        self.create_tools_tab(tab_tools)
        self.create_testing_tab(tab_testing)
        self.create_domains_tab(tab_domains)
        self.create_logs_tab(tab_logs)

    def create_control_tab(self, parent):
        profile_frame = ttk.LabelFrame(parent, text="–ü—Ä–æ—Ñ–∏–ª—å –æ–±—Ö–æ–¥–∞")
        profile_frame.pack(fill=tk.X, pady=5)

        self.profile_var = tk.StringVar()
        self.profiles_combobox = ttk.Combobox(profile_frame, textvariable=self.profile_var, state="readonly")
        self.profiles_combobox.pack(fill=tk.X, padx=5, pady=5)
        
        self.list_manager.create_list_selection_ui(parent)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        custom_list_frame = ttk.Frame(parent)
        custom_list_frame.pack(fill=tk.X, pady=5, padx=5)
        
        self.use_custom_list_var = tk.BooleanVar()
        self.use_custom_list_check = ttk.Checkbutton(
            custom_list_frame, 
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫", 
            variable=self.use_custom_list_var,
            command=self.on_custom_list_toggle
        )
        self.use_custom_list_check.pack(side=tk.LEFT, padx=5)
        
        self.custom_list_path_label = tk.Label(custom_list_frame, text="(–Ω–µ –≤—ã–±—Ä–∞–Ω)", fg="gray")
        self.custom_list_path_label.pack(side=tk.LEFT, padx=5)
        
        actions_frame = ttk.Frame(parent)
        actions_frame.pack(fill=tk.X, pady=5)
        
        self.run_button = ttk.Button(actions_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.run_selected_profile)
        self.run_button.pack(side=tk.LEFT, padx=5)
        self.stop_button = ttk.Button(actions_frame, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_process)
        self.stop_button.pack(side=tk.LEFT, padx=5)

        self.status_label = tk.Label(actions_frame, text="–°—Ç–∞—Ç—É—Å:")
        self.status_label.pack(side=tk.LEFT, padx=5, pady=5)

        self.status_indicator = tk.Label(actions_frame, text="–û–°–¢–ê–ù–û–í–õ–ï–ù–û", bg="#cccccc", fg="white", padx=10, pady=2, relief=tk.RAISED, borderwidth=2)
        self.status_indicator.pack(side=tk.LEFT, padx=10, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É - –†–ê–°–¢–Ø–ì–ò–í–ê–ï–ú –ù–ê –í–°–Æ –í–´–°–û–¢–£
        status_frame = ttk.LabelFrame(parent, text="–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞")
        status_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.status_text = tk.Text(status_frame, state='disabled', bg='black', fg='white', relief=tk.SUNKEN, borderwidth=1)
        self.status_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        setup_text_widget_bindings(self.status_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        clear_status_btn = ttk.Button(status_frame, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_status)
        clear_status_btn.pack(pady=5)

    def create_domains_tab(self, parent):
        # –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        method_frame = ttk.LabelFrame(parent, text="–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
        method_frame.pack(fill=tk.X, pady=5)

        self.domain_method_var = tk.StringVar()
        method_choices = []
        self.domain_method_map = {}
        
        available_methods = check_dependencies()

        if available_methods.get('selenium', False):
            display_name = "Performance API (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            method_choices.append(display_name)
            self.domain_method_map[display_name] = "performance"

        if available_methods.get('simple', False):
            display_name = "Simple Parser (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)"
            method_choices.append(display_name)
            self.domain_method_map[display_name] = "simple"

        if available_methods.get('playwright', False):
            display_name = "Playwright (–±—ã—Å—Ç—Ä—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π)"
            method_choices.append(display_name)
            self.domain_method_map[display_name] = "playwright"
        
        if available_methods.get('selenium', False):
            display_name = "Selenium (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π)"
            method_choices.append(display_name)
            self.domain_method_map[display_name] = "selenium"
            
        if not method_choices:
            method_choices.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
            self.domain_method_map["–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"] = "none"
            
        self.domain_method_combo = ttk.Combobox(method_frame, textvariable=self.domain_method_var, 
                                               values=method_choices, state="readonly")
        self.domain_method_combo.pack(fill=tk.X, padx=5, pady=5)
        if method_choices:
            self.domain_method_combo.current(0)

        # URL —Å–∞–π—Ç–∞
        url_frame = ttk.LabelFrame(parent, text="URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        url_frame.pack(fill=tk.X, pady=5)
        self.domain_url_entry = tk.Entry(url_frame, width=60)
        self.domain_url_entry.pack(fill=tk.X, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ URL
        self.domain_url_menu = tk.Menu(self.root, tearoff=0)
        self.domain_url_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_domain_url)
        self.domain_url_entry.bind("<Button-3>", self.show_domain_url_menu)
        self.domain_url_entry.bind("<Control-v>", lambda e: self.paste_domain_url())
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.domain_start_btn = ttk.Button(parent, text="üîç –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã", command=self.start_domain_analysis, state=tk.NORMAL)
        self.domain_start_btn.pack(pady=10)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ –ª–æ–≥–∞—Ö
        info_label = tk.Label(parent, text="–í—Å–µ –ª–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–õ–æ–≥–∏'", fg="gray")
        info_label.pack(pady=5)

    def create_logs_tab(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –ª–æ–≥–∞–º–∏"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(parent)
        header_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(header_frame, text="–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", font=('Arial', 12, 'bold')).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(header_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", command=self.clear_all_logs).pack(side=tk.RIGHT, padx=5)
        ttk.Button(header_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", command=self.save_logs_to_file).pack(side=tk.RIGHT, padx=5)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ª–æ–≥–æ–≤
        log_frame = ttk.Frame(parent)
        log_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.log_window = scrolledtext.ScrolledText(log_frame, state='disabled', bg='black', fg='white', relief=tk.SUNKEN, borderwidth=1)
        self.log_window.pack(fill=tk.BOTH, expand=True)
        setup_text_widget_bindings(self.log_window)
        
        # –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤
        filter_frame = ttk.LabelFrame(parent, text="–§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤")
        filter_frame.pack(fill=tk.X, pady=5)
        
        self.show_main_logs = tk.BooleanVar(value=True)
        self.show_domain_logs = tk.BooleanVar(value=True)
        self.show_status_logs = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(filter_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏", variable=self.show_main_logs, command=self.update_log_filter).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(filter_frame, text="–õ–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–æ–≤", variable=self.show_domain_logs, command=self.update_log_filter).pack(side=tk.LEFT, padx=5)
        ttk.Checkbutton(filter_frame, text="–õ–æ–≥–∏ —Å—Ç–∞—Ç—É—Å–∞", variable=self.show_status_logs, command=self.update_log_filter).pack(side=tk.LEFT, padx=5)
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        self.all_logs = []
        self.filtered_logs = []

    def create_tools_tab(self, parent):
        tools_top_frame = ttk.Frame(parent)
        tools_top_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(tools_top_frame, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", command=self.check_status).pack(side=tk.LEFT, padx=5, pady=5)
        
        settings_frame = ttk.LabelFrame(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_frame.pack(fill=tk.X, pady=10)
        
        self.game_filter_var = tk.BooleanVar()
        self.game_filter_check = ttk.Checkbutton(settings_frame, text="–ò–≥—Ä–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (–¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π)", variable=self.game_filter_var)
        self.game_filter_check.pack(anchor=tk.W, padx=5, pady=5)
        
        self.use_ipset_var = tk.BooleanVar(value=False)
        self.use_ipset_check = ttk.Checkbutton(settings_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IPSet (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)", variable=self.use_ipset_var)
        self.use_ipset_check.pack(anchor=tk.W, padx=5, pady=5)
        
        service_frame = ttk.LabelFrame(parent, text="–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ (–°–∏—Å—Ç–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞)")
        service_frame.pack(fill=tk.X, pady=10)
        self.install_service_button = ttk.Button(service_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫", command=self.install_service)
        self.install_service_button.pack(side=tk.LEFT, padx=5, pady=5)
        self.uninstall_service_button = ttk.Button(service_frame, text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞", command=self.uninstall_service)
        self.uninstall_service_button.pack(side=tk.LEFT, padx=5, pady=5)
        
        domain_frame = ttk.LabelFrame(parent, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏")
        domain_frame.pack(fill=tk.X, pady=10)
        ttk.Button(domain_frame, text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫", command=self.open_custom_list).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(domain_frame, text="–í—ã–±—Ä–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫...", command=self.select_custom_list_file).pack(side=tk.LEFT, padx=5, pady=5)

    def create_testing_tab(self, parent):
        site_test_frame = ttk.LabelFrame(parent, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø–æ —Å–∞–π—Ç—É")
        site_test_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(site_test_frame, text="–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, rutracker.org):").pack(anchor=tk.W, padx=5, pady=(5,0))
        self.site_test_url = tk.StringVar(value="rutracker.org")
        self.site_test_url_entry = ttk.Entry(site_test_frame, textvariable=self.site_test_url)
        self.site_test_url_entry.pack(fill=tk.X, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ URL —Ç–µ—Å—Ç–∞
        self.site_test_url_menu = tk.Menu(self.root, tearoff=0)
        self.site_test_url_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_site_test_url)
        self.site_test_url_entry.bind("<Button-3>", self.show_site_test_url_menu)
        self.site_test_url_entry.bind("<Control-v>", lambda e: self.paste_site_test_url())

        ttk.Button(site_test_frame, text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Å–∞–π—Ç—É", command=self.run_site_test).pack(pady=5)
        discord_test_frame = ttk.LabelFrame(parent, text="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Discord")
        discord_test_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(discord_test_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Discord", command=lambda: self.run_in_thread(settings_manager.clear_discord_cache, self.app_dir, self.log_message)).pack(side=tk.LEFT, padx=5, pady=5)
        ttk.Button(discord_test_frame, text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è Discord", command=self.run_discord_test).pack(side=tk.LEFT, padx=5, pady=5)

    def _handle_ui_error(self, e):
        error_details = traceback.format_exc()
        self.log_message("\n" + "="*20 + " –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê GUI " + "="*20, "error")
        self.log_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:", "error")
        self.log_message(error_details, "error")
        self.log_message("="*62 + "\n", "error")
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{e}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ–∫–Ω–µ –ª–æ–≥–æ–≤.")

    def populate_profiles_list(self):
        profile_names = [p['name'] for p in self.profiles]
        self.profiles_combobox['values'] = profile_names
        if profile_names:
            self.profiles_combobox.current(0)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø—Ä–æ—Ñ–∏–ª—è
        self.profiles_combobox.bind("<<ComboboxSelected>>", self.on_profile_change)

    def on_profile_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤."""
        profile = self.get_selected_profile()
        if profile:
            required_lists = profile.get('required_lists', [])
            self.list_manager.set_required_lists(required_lists)
            self.log_message(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile['name']}. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏: {required_lists}", "main")

    def get_selected_profile(self):
        selected_name = self.profile_var.get()
        if not selected_name:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return None
        
        return next((p for p in self.profiles if p['name'] == selected_name), None)

    def update_status_indicator(self, is_running):
        time_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        bg_color = "#4CAF50" if is_running else "#cccccc"
        self.status_logger.info(f"time={time_str}, is_running={is_running}, bg_color={bg_color}")

        if is_running:
            self.status_indicator.config(text="–ó–ê–ü–£–©–ï–ù–û", bg="#4CAF50")
            self.domain_start_btn.config(state=tk.NORMAL)
        else:
            self.status_indicator.config(text="–û–°–¢–ê–ù–û–í–õ–ï–ù–û", bg="#cccccc")
            self.domain_start_btn.config(state=tk.NORMAL)

    def run_selected_profile(self):
        print("!!! –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–´–ü–û–õ–ù–Ø–ï–¢–°–Ø –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø RUN_SELECTED_PROFILE !!!")
        try:
            if self.process and self.process.poll() is None:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
                return
            
            profile = self.get_selected_profile()
            if not profile: return
            
            self.log_message(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è: {profile['name']}", "main")
            process_manager.stop_all_processes(self.log_message)
            
            game_filter_enabled = self.game_filter_var.get()
            use_ipset = self.use_ipset_var.get()
            
            if use_ipset and not os.path.exists(os.path.join(self.app_dir, 'lists', 'ipset-all.txt')):
                self.log_message("–í–ù–ò–ú–ê–ù–ò–ï: ipset-all.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –≤ `launcher.py` –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –µ–≥–æ.", "status")

            custom_list_path = None
            if self.use_custom_list_var.get():
                custom_list_path = self.list_manager.get_custom_list_path()
                self.log_message(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –í–ö–õ–Æ–ß–ï–ù–û. –ü—É—Ç—å: {custom_list_path}", "main")
                if not custom_list_path or not os.path.exists(custom_list_path):
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
            else:
                self.log_message("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–û", "main")

            combined_list_path = self.list_manager.get_combined_list_path(custom_list_path, self.log_message)
            
            if combined_list_path:
                 self.log_message(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {combined_list_path}", "main")
            else:
                 self.log_message("–í–ù–ò–ú–ê–ù–ò–ï: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω (–ø—É—Å—Ç –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω). –û–±—Ö–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤ –¥–æ–º–µ–Ω–æ–≤.", "status")

            self.process = process_manager.start_process(
                profile, self.app_dir, game_filter_enabled, 
                self.log_message, combined_list_path, use_ipset
            )
            
            if not self.process:
                self.log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.", "error")
                return
                
            self.set_controls_state(tk.DISABLED)
            self.update_status_indicator(True)
            self.worker_thread = threading.Thread(target=self.read_process_output, daemon=True)
            self.worker_thread.start()
            self.monitor_process()
        except Exception as e:
            self._handle_ui_error(e)

    def read_process_output(self):
        for line in iter(self.process.stdout.readline, ''):
            self.log_queue.put(line)
        self.log_queue.put(None)

    def monitor_process(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è"""
        try:
            if hasattr(self, '_monitoring_active') and self._monitoring_active:
                return
                
            self._monitoring_active = True
            
            line = self.log_queue.get_nowait()
            if line is None:
                self.process_finished()
                self._monitoring_active = False
                return
            self.log_message(line.strip(), "main")
        except queue.Empty:
            pass
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}", "error")
            self._monitoring_active = False
            return
            
        if self.process and self.process.poll() is None:
            self.root.after(100, self.monitor_process)
        elif self.process:
            self.process_finished()
            self._monitoring_active = False
        else:
            self._monitoring_active = False

    def process_finished(self):
        return_code = self.process.poll() if self.process else 'N/A'
        self.log_message(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º {return_code}", "status")
        self.set_controls_state(tk.NORMAL)
        self.update_status_indicator(False)
        self.process = None

    def stop_process(self):
        try:
            self.log_message("–û–°–¢–ê–ù–û–í–ö–ê –ü–†–û–¶–ï–°–°–ê", "status")
            
            self.stop_button.config(state=tk.DISABLED, text="–û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            self.root.update()
            
            process_manager.stop_all_processes(self.log_message)
            
            time.sleep(2)
            
            if not process_manager.is_process_running():
                self.log_message("‚úì –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "success")
            else:
                self.log_message("‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã", "error")
            
            self.check_status(log_header=False)
            self.set_controls_state(tk.NORMAL)
            self.update_status_indicator(False)
            
            if self.process:
                self.process = None
                
            self.stop_button.config(state=tk.NORMAL, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            
        except Exception as e:
            self._handle_ui_error(e)
        finally:
            self.stop_button.config(state=tk.NORMAL, text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")

    def check_status(self, log_header=True):
        try:
            settings_manager.check_status(self.app_dir, self.log_message, log_header)
        except Exception as e:
            self._handle_ui_error(e)

    def set_controls_state(self, state):
        self.run_button.config(state=state)
        self.install_service_button.config(state=state)
        combobox_state = "readonly" if state == tk.NORMAL else tk.DISABLED
        self.profiles_combobox.config(state=combobox_state)
        self.use_custom_list_check.config(state=state)

    def on_closing(self):
        try:
            self.save_app_settings()
            if self.process and self.process.poll() is None:
                choice = self._ask_to_stop_on_close()
                if choice == 'yes':
                    self.stop_process()
                    self.root.destroy()
                elif choice == 'no':
                    self.root.destroy()
            else:
                self.root.destroy()
        except Exception as e:
            self._handle_ui_error(e)

    def _ask_to_stop_on_close(self):
        dialog = tk.Toplevel(self.root)
        dialog.title("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞")
        dialog.geometry("350x120")
        dialog.resizable(False, False)
        
        dialog.transient(self.root)
        dialog.grab_set()
        
        result = {'choice': None}

        message = "–ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?"
        tk.Label(dialog, text=message, wraplength=300).pack(pady=10)

        button_frame = tk.Frame(dialog)
        button_frame.pack(pady=10)

        def on_yes():
            result['choice'] = 'yes'
            dialog.destroy()

        def on_no():
            result['choice'] = 'no'
            dialog.destroy()

        def on_cancel():
            result['choice'] = 'cancel'
            dialog.destroy()

        tk.Button(button_frame, text="–î–∞", command=on_yes, width=10).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="–ù–µ—Ç", command=on_no, width=10).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=on_cancel, width=10).pack(side=tk.LEFT, padx=5)
        
        dialog.update_idletasks()
        x = self.root.winfo_x() + (self.root.winfo_width() // 2) - (dialog.winfo_width() // 2)
        y = self.root.winfo_y() + (self.root.winfo_height() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        self.root.wait_window(dialog)
        
        return result['choice']

    def log_message(self, message, log_type="main"):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ç–∏–ø–æ–º"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        
        prefix = ""
        if log_type == "domain":
            prefix = "[–î–û–ú–ï–ù–´] "
        elif log_type == "status":
            prefix = "[–°–¢–ê–¢–£–°] "
        elif log_type == "error":
            prefix = "[–û–®–ò–ë–ö–ê] "
        elif log_type == "success":
            prefix = "[–£–°–ü–ï–•] "
        
        formatted_message = f"[{timestamp}] {prefix}{message}"
        
        log_entry = {"text": formatted_message, "type": log_type, "timestamp": timestamp}
        self.all_logs.append(log_entry)
        
        self.update_log_display()
        
        if log_type in ["main", "status", "error", "success"]:
            self.update_status_display(message, log_type)
    
    def update_status_display(self, message, log_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ"""
        try:
            self.status_text.config(state='normal')
            
            color = "white"
            if log_type == "error":
                color = "#ff6b6b"
            elif log_type == "success":
                color = "#51cf66"
            elif log_type == "status":
                color = "#74c0fc"
            
            self.status_text.tag_configure(log_type, foreground=color)
            self.status_text.insert(tk.END, f"{message}\n", log_type)
            self.status_text.see(tk.END)
            
            lines = int(self.status_text.index('end-1c').split('.')[0])
            if lines > 50:
                self.status_text.delete('1.0', '2.0')
            
            self.status_text.config(state='disabled')
        except:
            pass
    
    def update_log_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        if not hasattr(self, 'log_window'):
            return
            
        try:
            self.log_window.config(state='normal')
            self.log_window.delete('1.0', tk.END)
            
            self.filtered_logs = []
            for log_entry in self.all_logs:
                if (log_entry["type"] == "main" and self.show_main_logs.get()) or \
                   (log_entry["type"] == "domain" and self.show_domain_logs.get()) or \
                   (log_entry["type"] in ["status", "error", "success"] and self.show_status_logs.get()):
                    self.filtered_logs.append(log_entry)
                    self.log_window.insert(tk.END, log_entry["text"] + "\n")
            
            self.log_window.config(state='disabled')
            self.log_window.see(tk.END)
        except:
            pass
    
    def update_log_filter(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤"""
        self.update_log_display()
    
    def clear_all_logs(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏"""
        self.all_logs.clear()
        self.filtered_logs.clear()
        if hasattr(self, 'log_window'):
            self.log_window.config(state='normal')
            self.log_window.delete('1.0', tk.END)
            self.log_window.config(state='disabled')
        self.log_message("–í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", "status")
    
    def clear_status(self):
        """–û—á–∏—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞"""
        if hasattr(self, 'status_text'):
            self.status_text.config(state='normal')
            self.status_text.delete('1.0', tk.END)
            self.status_text.config(state='disabled')
    
    def save_logs_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                initialfile=f"logs_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("–õ–æ–≥–∏ DPI GUI\n")
                    f.write("=" * 50 + "\n")
                    f.write(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write("=" * 50 + "\n\n")
                    
                    for log_entry in self.all_logs:
                        f.write(log_entry["text"] + "\n")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}")
                self.log_message(f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}", "success")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏:\n{e}")
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}", "error")
    
    def domain_log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–µ–Ω–æ–≤"""
        self.log_message(message, "domain")

    def run_in_thread(self, target_func, *args):
        thread = threading.Thread(target=target_func, args=args, daemon=True)
        thread.start()

    def save_app_settings(self):
        settings_data = {
            "selected_profile": self.profile_var.get(),
            "game_filter": self.game_filter_var.get(),
            "use_ipset": self.use_ipset_var.get(),
            "selected_lists": self.list_manager.selected_lists,
            "use_custom_list": self.use_custom_list_var.get(),
            "custom_list_path": self.list_manager.get_custom_list_path()
        }
        settings_manager.save_app_settings(settings_data, self.app_dir)
        self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", "success")

    def load_app_settings(self):
        settings = settings_manager.load_app_settings(self.app_dir)
        if not settings:
            self.log_message("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "status")
            return
        
        profile_name = settings.get("selected_profile")
        profile_names = self.profiles_combobox['values']
        if profile_name in profile_names:
            self.profile_var.set(profile_name)
        
        self.game_filter_var.set(settings.get("game_filter", False))
        self.use_ipset_var.set(settings.get("use_ipset", False))
        self.use_custom_list_var.set(settings.get("use_custom_list", False))
        
        custom_list_path = settings.get("custom_list_path")
        if custom_list_path and os.path.exists(custom_list_path):
            self.list_manager.set_custom_list_path(custom_list_path)
            self.custom_list_path_label.config(text=os.path.basename(custom_list_path), fg="black")
        
        self.list_manager.set_selection_state(settings.get("selected_lists"))
        
        self.on_profile_change()
        
        self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", "success")
        
    def open_custom_list(self):
        try:
            custom_list_path = self.list_manager.get_custom_list_path()
            if not custom_list_path:
                custom_list_path = os.path.join(self.app_dir, 'lists', 'custom_list.txt')
                if not os.path.exists(custom_list_path):
                    with open(custom_list_path, 'w', encoding='utf-8') as f:
                        f.write("# –≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–º–µ–Ω—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n")
            os.startfile(custom_list_path)
        except Exception as e:
            self._handle_ui_error(e)

    def on_custom_list_toggle(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
        if self.use_custom_list_var.get():
            self.select_custom_list_file()
        else:
            self.list_manager.set_custom_list_path(None)
            self.custom_list_path_label.config(text="(–Ω–µ –≤—ã–±—Ä–∞–Ω)", fg="gray")

    def select_custom_list_file(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            self.list_manager.set_custom_list_path(file_path)
            self.custom_list_path_label.config(text=os.path.basename(file_path), fg="black")
        else:
            self.use_custom_list_var.set(False)
            self.list_manager.set_custom_list_path(None)

    def add_domains_to_list(self, new_domains):
        try:
            log_callback = self.domain_log
            
            custom_list_path = self.list_manager.get_custom_list_path()
            if not custom_list_path:
                custom_list_path = os.path.join(self.app_dir, 'lists', 'custom_list.txt')
                log_callback(f"–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: {custom_list_path}")
            
            existing_domains = set()
            if os.path.exists(custom_list_path):
                log_callback("–ß–∏—Ç–∞—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤...")
                with open(custom_list_path, 'r', encoding='utf-8') as f:
                    for line_num, line in enumerate(f, 1):
                        line = line.strip()
                        if line and not line.startswith('#'):
                            existing_domains.add(line)
                log_callback(f"–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–º–µ–Ω–æ–≤: {len(existing_domains)}")
            else:
                log_callback("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤...")
            
            added_domains = []
            skipped_domains = []
            
            log_callback("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã:")
            for domain in new_domains:
                if domain in existing_domains:
                    skipped_domains.append(domain)
                    log_callback(f"  - {domain} (–£–ñ–ï –ï–°–¢–¨ –í –°–ü–ò–°–ö–ï)")
                else:
                    added_domains.append(domain)
                    log_callback(f"  + {domain} (–ù–û–í–´–ô –î–û–ú–ï–ù)")
            
            if not added_domains:
                log_callback("–ù–û–í–´–• –î–û–ú–ï–ù–û–í –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–û")
                if skipped_domains:
                    log_callback(f"–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ ({len(skipped_domains)} —à—Ç.)")
                return
            
            log_callback(f"–î–û–ë–ê–í–õ–Ø–Æ {len(added_domains)} –ù–û–í–´–• –î–û–ú–ï–ù–û–í –í –°–ü–ò–°–û–ö...")
            
            all_domains = sorted(list(existing_domains.union(set(new_domains))))
            
            with open(custom_list_path, 'w', encoding='utf-8') as f:
                f.write("# –≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤. –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–º–µ–Ω—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n")
                f.write("# –°—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å #, –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.\n")
                f.write(f"# –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("#\n")
                for domain in all_domains:
                    f.write(domain + '\n')
            
            log_callback(f"‚úì –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û {len(added_domains)} –ù–û–í–´–• –î–û–ú–ï–ù–û–í:")
            for domain in added_domains:
                log_callback(f"  ‚úì {domain}")
            
            log_callback(f"‚úì –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –î–û–ú–ï–ù–û–í –í –°–ü–ò–°–ö–ï: {len(all_domains)}")
            
            self.root.after(0, self._propose_restart_after_domain_update)

        except Exception as e:
            self.domain_log(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–æ–≤: {e}")
            self._handle_ui_error(e)

    def _propose_restart_after_domain_update(self):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤."""
        if process_manager.is_process_running():
            if messagebox.askyesno(
                "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?",
                "–ù–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–ª—è –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n\n–°–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å–µ–π—á–∞—Å?"
            ):
                self.domain_log("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ–º–µ–Ω–æ–≤...")
                self.stop_process()
                self.root.after(1500, self.run_selected_profile)

    def start_domain_analysis(self):
        url = self.domain_url_entry.get().strip()
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL!")
            return
            
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
            
        method_text = self.domain_method_var.get()
        method = self.domain_method_map.get(method_text)
        if not method or method == "none":
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞.")
            return
            
        self.domain_start_btn.config(state=tk.DISABLED, text="‚è≥ –ê–Ω–∞–ª–∏–∑...")
        
        self.domain_analysis_thread = threading.Thread(target=self.run_domain_analysis_loop, args=(url, method), daemon=True)
        self.domain_analysis_thread.start()

    def run_domain_analysis_loop(self, url, method):
        max_attempts = 3
        for attempt in range(1, max_attempts + 1):
            self.domain_log(f"=== –ü–û–ü–´–¢–ö–ê {attempt}/{max_attempts} ===")
            self.domain_log(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é URL: {url}")
            self.domain_log(f"–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {method}")
            
            domains = self.run_single_analysis(url, method)
            
            if domains:
                self.domain_log(f"‚úì –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ï–ù - –ù–ê–ô–î–ï–ù–û {len(domains)} –î–û–ú–ï–ù(–û–í)")
                self.domain_log("–ù–ê–ß–ò–ù–ê–Æ –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –°–ü–ò–°–û–ö...")
                self.add_domains_to_list(domains)
                
                if "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥" in self.domain_log_text.get('1.0', tk.END):
                    if attempt < max_attempts:
                        self.domain_log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
                        continue
                else:
                    self.domain_log("=== –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù ===")
                    break
            else:
                self.domain_log("‚úó –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –î–û–ú–ï–ù–´ –ù–ê –≠–¢–û–ô –ü–û–ü–´–¢–ö–ï")
                if attempt < max_attempts:
                    self.domain_log("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
                else:
                    self.domain_log("=== –ê–ù–ê–õ–ò–ó –ù–ï –£–î–ê–õ–°–Ø –ü–û–°–õ–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ü–û–ü–´–¢–û–ö ===")

        self.root.after(0, lambda: self.domain_start_btn.config(state=tk.NORMAL, text="üîç –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã"))

    def run_single_analysis(self, url, method):
        try:
            domains = None
            if method == "performance":
                domains = analyze_site_domains_performance(url, self.domain_log)
            elif method == "playwright":
                domains = analyze_site_domains_playwright(url, self.domain_log)
            elif method == "selenium":
                domains = analyze_site_domains_selenium(url, self.domain_log)
            elif method == "simple":
                domains = analyze_site_domains_simple(url, self.domain_log)
            else:
                self.domain_log("–ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –ú–ï–¢–û–î")
            return domains
        except Exception as e:
            self.domain_log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            return None

    def show_domain_url_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ URL."""
        try:
            self.domain_url_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.domain_url_menu.grab_release()

    def paste_domain_url(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ URL."""
        try:
            text = self.root.clipboard_get()
            self.domain_url_entry.delete(0, tk.END)
            self.domain_url_entry.insert(0, text)
        except tk.TclError:
            pass

    def show_site_test_url_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ URL —Ç–µ—Å—Ç–∞."""
        try:
            self.site_test_url_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.site_test_url_menu.grab_release()

    def paste_site_test_url(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ URL —Ç–µ—Å—Ç–∞."""
        try:
            text = self.root.clipboard_get()
            self.site_test_url_entry.delete(0, tk.END)
            self.site_test_url_entry.insert(0, text)
        except tk.TclError:
            pass

    def install_service(self):
        try:
            profile = self.get_selected_profile()
            if not profile: return
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{profile['name']}' –∫–∞–∫ —Å–ª—É–∂–±—É Windows?\n\n–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ–±—Ö–æ–¥—É –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã."):
                self.run_in_thread(settings_manager.install_service, self.app_dir, self.log_message, profile)
        except Exception as e:
            self._handle_ui_error(e)

    def uninstall_service(self):
        try:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å —Å–ª—É–∂–±—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ Zapret?"):
                self.run_in_thread(settings_manager.uninstall_service, self.app_dir, self.log_message)
        except Exception as e:
            self._handle_ui_error(e)

    def _check_test_running(self):
        if self.test_thread and self.test_thread.is_alive():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–¢–µ—Å—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return True
        return False

    def run_site_test(self):
        try:
            if self._check_test_running(): return
            domain = self.site_test_url.get().strip()
            if not domain:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞.")
                return
            
            self.test_thread = threading.Thread(
                target=testing_utils.run_site_test,
                args=(domain, self.profiles, self.app_dir, self.game_filter_var.get(), self.log_message),
                daemon=True
            )
            self.test_thread.start()
        except Exception as e:
            self._handle_ui_error(e)

    def run_discord_test(self):
        try:
            if self._check_test_running(): return
            def ask_user_callback(profile_name):
                return messagebox.askyesno(
                    "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç",
                    f"–ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∑–∞–ø—É—â–µ–Ω.\n\nDiscord –∑–∞—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ?",
                    icon='question'
                )
            self.test_thread = threading.Thread(
                target=testing_utils.run_discord_test,
                args=(self.profiles, self.app_dir, self.game_filter_var.get(), self.log_message, ask_user_callback),
                daemon=True
            )
            self.test_thread.start()
        except Exception as e:
            self._handle_ui_error(e)
            
if __name__ == "__main__":
    if not process_manager.is_admin():
        run_as_admin()
        sys.exit()
    
    root = tk.Tk()
    app = App(root)
    root.mainloop()